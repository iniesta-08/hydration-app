% Create a new fuzzy inference system
fis = mamfis('Name','FitnessMeter');


% Define membership function names for HeartRate
heartRateMFs = {'Low', 'Medium', 'High'};

% Define membership function names for ExerciseDuration
exerciseDurationMFs = {'Short', 'Moderate', 'Long'};

% Define membership function names for StepCount
stepCountMFs = {'Low', 'Medium', 'High'};
fitnessLevelMFs = {'Poor','Average','Good','Excellent'};

% Add input variables
fis = addInput(fis,[50 200],'Name','HeartRate'); % Heart rate in bpm
fis = addInput(fis,[10 120],'Name','ExerciseDuration'); % Duration in minutes
fis = addInput(fis,[0 10000],'Name','StepCount'); % Step count

% Define membership functions for HeartRate
fis = addMF(fis,'HeartRate','gaussmf',[15 60],'Name','Low'); % Narrower range for Low
fis = addMF(fis,'HeartRate','gaussmf',[30 110],'Name','Medium'); % Adjusted Medium range
fis = addMF(fis,'HeartRate','gaussmf',[40 150],'Name','High'); % Start High range at higher bpm

% Define membership functions for ExerciseDuration
fis = addMF(fis,'ExerciseDuration','trapmf',[10 20 30 60],'Name','Short'); % Reduced overlap
fis = addMF(fis,'ExerciseDuration','trapmf',[50 70 90 110],'Name','Moderate');
fis = addMF(fis,'ExerciseDuration','trapmf',[90 100 110 120],'Name','Long'); % Adjusted Long range

% Define membership functions for StepCount
fis = addMF(fis,'StepCount','trapmf',[0 1000 2000 3000],'Name','Low');
fis = addMF(fis,'StepCount','trapmf',[2000 4000 6000 8000],'Name','Medium');
fis = addMF(fis,'StepCount','trapmf',[7000 8000 10000 10000],'Name','High');

% Add output variable
fis = addOutput(fis,[0 100],'Name','FitnessLevel');


% Define membership functions for FitnessLevel with adjusted parameters
fis = addMF(fis,'FitnessLevel','trimf',[0 20 40],'Name','Poor');      % Narrower range for Poor
fis = addMF(fis,'FitnessLevel','trimf',[30 50 70],'Name','Average');  % Shift Average to lower range
fis = addMF(fis,'FitnessLevel','trimf',[60 80 100],'Name','Good');    % Broaden Good to cover more range
fis = addMF(fis,'FitnessLevel','trimf',[80 100 100],'Name','Excellent'); % Make Excellent more dominant


% Define the rule matrix
ruleList = [];

% Loop through all combinations of input membership functions
for i = 1:length(heartRateMFs)
    for j = 1:length(exerciseDurationMFs)
        for k = 1:length(stepCountMFs)
            % Initialize default fitness level
            fitnessLevel = 'Average';

            % High Intensity, Long Duration, High Activity
            if (strcmp(heartRateMFs{i},'High') && strcmp(exerciseDurationMFs{j},'Long') && strcmp(stepCountMFs{k},'High'))
                 fitnessLevel = 'Excellent';

            % High Heart Rate, Long Duration, Moderate Activity
            elseif (strcmp(heartRateMFs{i},'High') && strcmp(exerciseDurationMFs{j},'Long') && strcmp(stepCountMFs{k},'Medium'))
                fitnessLevel = 'Good';

            % Other conditions
            elseif (strcmp(heartRateMFs{i},'Medium') && strcmp(exerciseDurationMFs{j},'Moderate') && strcmp(stepCountMFs{k},'Medium'))
                fitnessLevel = 'Good';
            elseif (strcmp(heartRateMFs{i},'High') && strcmp(exerciseDurationMFs{j},'Short') && strcmp(stepCountMFs{k},'High'))
                fitnessLevel = 'Good';
            elseif (strcmp(heartRateMFs{i},'Medium') && strcmp(exerciseDurationMFs{j},'Short') && strcmp(stepCountMFs{k},'Low'))
                fitnessLevel = 'Poor';
            elseif (strcmp(heartRateMFs{i},'Low') && strcmp(exerciseDurationMFs{j},'Short') && strcmp(stepCountMFs{k},'Low'))
                fitnessLevel = 'Poor';
            end

            % Find indices for the membership functions
            heartRateIndex = find(strcmp(heartRateMFs, heartRateMFs{i}));
            exerciseDurationIndex = find(strcmp(exerciseDurationMFs, exerciseDurationMFs{j}));
            stepCountIndex = find(strcmp(stepCountMFs, stepCountMFs{k}));
            fitnessLevelIndex = find(strcmp(fitnessLevelMFs, fitnessLevel));

            % Add rule to the rule list
            ruleList = [ruleList; [heartRateIndex exerciseDurationIndex stepCountIndex fitnessLevelIndex 1 1]];
        end
    end
end

% Define a specific rule for high input values leading to 'Excellent'
highHeartRateIndex = find(strcmp(heartRateMFs, 'High'));
longExerciseDurationIndex = find(strcmp(exerciseDurationMFs, 'Long'));
highStepCountIndex = find(strcmp(stepCountMFs, 'High'));
excellentFitnessLevelIndex = find(strcmp(fitnessLevelMFs, 'Excellent'));

% Add this specific rule
specificRule = [highHeartRateIndex longExerciseDurationIndex highStepCountIndex excellentFitnessLevelIndex 1 1];
fis = addRule(fis, specificRule);



% Add rules to the FIS
fis = addRule(fis,ruleList);


% Add rules to the FIS
fis = addRule(fis,ruleList);

% Save the FIS to a file in the current directory
writeFIS(fis, 'FitnessMeter.fis');

% % Load the FIS from the file
 fis = readfis('FitnessMeter.fis');

% % Display information about the loaded FIS
disp(fis);

% Example input sets for evaluation
inputSets = [
    150, 100, 9000; % High heart rate, long duration, high step count
    120, 60, 5000;  % Medium heart rate, moderate duration, medium step count
    80, 30, 2000;   % Low heart rate, short duration, low step count
    150, 110, 3000; % High heart rate, long duration, low step count
    90, 80, 7000;   % Low heart rate, long duration, high step count
    130, 40, 1000   % Medium heart rate, short duration, low step count
];

% Evaluate each set of inputs
for i = 1:size(inputSets, 1)
    inputData = inputSets(i, :);
    outputData = evalfis(fis, inputData);
    fprintf('Input: Heart Rate = %d, Exercise Duration = %d, Step Count = %d\n', inputData(1), inputData(2), inputData(3));
    fprintf('Estimated Fitness Level: %.2f\n\n', outputData);
end
